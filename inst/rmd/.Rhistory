rectColor="white"
drawRect = FALSE
# T1/T2 combo not found in TF table for this AOI
if (is.na(estStr) & is.na(seStr)) {
rectColor = "white"
cellLabel = ""
drawRect = TRUE
}
# persistence on the diagonal of the matrix
if (T1Idx == T2Idx & !(is.na(estStr) & is.na(seStr)) ) {
rectColor = "gray"
cellLabel = paste0(setDecPlaces(estStr,2),"%\n",
"(",setDecPlaces(seStr,2),"%)")
drawRect = TRUE
}
# change occurred - plot orange cell
if (T1Idx != T2Idx & !(is.na(estStr) & is.na(seStr))) {
rectColor = "orange"
cellLabel = paste0(setDecPlaces(estStr,2),"%\n",
"(",setDecPlaces(seStr,2),"%)")
drawRect = TRUE
}
if (drawRect) {
polygon(x=rectXCoord,y=rectYCoord,col=rectColor)
text(x=labX,y=labY,labels=cellLabel,col="black",cex=0.8)
}
# Add T1 class name to left of grid
if ((T2Idx %% nClasses) == 1) {
if(datatype=='LU') { # note to self: need to scale these values by nClasses
xLabOffset = 1
} else { # LC
xLabOffset = 1.5
}
xcoord = labX - xLabOffset
ycoord = labY
par(xpd=NA)
text(x=xcoord,y=ycoord,labels=allClassesPretty[T1Idx],col="black",cex=0.9)
# left side title
if (T1Idx == 1 && T2Idx == 1) {
text(x=xcoord,y=ycoord+0.75,labels=paste0("T1 ",yaxTitle),col="black",font=2)
}
} # end if/write T1 class names along left of grid
# Add T2 class name along top of grid
if ((T1Idx %% nClasses) == 1) {
if(datatype=='LU') { # note to self: need to scale these values by nClasses
xLabOffset = 0.2
yLabOffset = 1.5
} else { # LC
xLabOffset = 0.1
yLabOffset = 1.5
}
xcoord = labX + xLabOffset
ycoord = labY + yLabOffset
par(xpd=NA)
text(x=xcoord,y=ycoord,labels=allClassesPretty[T2Idx],col="black",cex=0.9,srt=45)
# top side title
if (T1Idx == 1 && T2Idx == 1) {
if (datatype=='LU') { # note to self: need to scale these values by nClasses
yLabOffset = 1
} else { # LC
yLabOffset = 1
}
text(x=xcoord,y=ycoord+yLabOffset,labels=paste0("T2 ",yaxTitle),col="black",font=2)
}
} # end if/write T1 class names along left of grid
} # end for loop over T2
} # end for loop over T1
par(xpd=NA) # allow drawing outside of figure region itself.
legend("topright",
legend=c("Persistence","Change\nOccurred",
paste0("Change\nCombination\nNot Present in\n",AOInm)),
pt.cex=1.5,fill=c("gray","orange","white"), cex=1, bty='n', bg="white",
inset=c(-0.05,0.05),y.intersp=1.4)
}
######################## Second plot #####################################################
plotCheckerboard2 = function(datatype='LU',inFile,
use1nm, use2nm, cover1nm, cover2nm,
allClasses=as.character(0),
allClassesPretty=as.character(0),
cellWidth=NA,cellHeight=NA) {
if (invisible(is.null(inFile))) {
print("missing args - Need a data file, with full path")
quit()
}
if (length(allClasses) == 0) {
print("missing args - need a vector of class names")
quit()
}
if (length(allClassesPretty) == 0) {
print("missing args - need a vector of pretty class names for labeling rows & columns")
quit()
}
if (is.na(cellWidth)) {
print("missing args - need a user-defined cell width")
quit()
}
if (is.na(cellHeight)) {
print("missing args - need a user-defined cell height")
quit()
}
tabInfo = inFile
nClasses = length(allClasses)
xmax = cellWidth*(nClasses+1.5)
ymax = cellHeight*(nClasses+1.5)
#par(mar = c(0, 5, 0, 0)+.1) # leave room for T1 and T2 Class Names at left and top
# set up grid of rectangles that will be colored by gain/loss
plot(xmax,ymax,typ='n',xlim=c(0,xmax),ylim=c(0,ymax),xaxt='n',yaxt='n',
ann=FALSE,bty='n')
for (T1Idx in 1:nClasses) {
T1 = allClasses[T1Idx]
for (T2Idx in 1:nClasses) {
T2 = allClasses[T2Idx]
# figure out rectangle vertices for this cell
rectXCoord = c(T2Idx-1,T2Idx,T2Idx,T2Idx-1)*cellWidth
rectYCoord = c((nClasses+1)-T1Idx,
(nClasses+1)-T1Idx,
(nClasses+1)-T1Idx+1,
(nClasses+1)-T1Idx+1)*cellHeight
# add label to rectangle.
labX = mean(c(T2Idx-1,T2Idx))
labY = mean(c((nClasses+1)-T1Idx,
(nClasses+1)-T1Idx+1))
if (datatype == 'LU') {
estStr = tabInfo[tabInfo[[use1nm]] == T1 & tabInfo[[use2nm]] == T2,]$est
seStr = tabInfo[tabInfo[[use1nm]] == T1 & tabInfo[[use2nm]] == T2,]$est.se
yaxTitle = "Land Use"
} else if (datatype == 'LC') {
estStr = tabInfo[tabInfo[[cover1nm]] == T1 & tabInfo[[cover2nm]] == T2,]$est
seStr = tabInfo[tabInfo[[cover1nm]] == T1 & tabInfo[[cover2nm]] == T2,]$est.se
yaxTitle = "Land Cover"
} else {
print("you said datatype != LU and datatype != LC... need to specify datatype = LU or LC")
quit()
}
if (length(estStr) != 1) {
estStr = NA
}
if (length(seStr) != 1) {
seStr = NA
}
# defaults
cellLabel = ""
rectColor="white"
drawRect = FALSE
# T1/T2 combo not found in TF table for this AOI
if (is.na(estStr) & is.na(seStr)) {
rectColor = "white"
cellLabel = ""
drawRect = TRUE
}
# persistence on the diagonal of the matrix
if (T1Idx == T2Idx & !(is.na(estStr) & is.na(seStr)) ) {
rectColor = "gray"
cellLabel = paste0(setDecPlaces(estStr,2),"%\n",
"(",setDecPlaces(seStr,2),"%)")
drawRect = TRUE
}
# change occurred - plot orange cell
if (T1Idx != T2Idx & !(is.na(estStr) & is.na(seStr))) {
rectColor = "orange"
cellLabel = paste0(setDecPlaces(estStr,2),"%\n",
"(",setDecPlaces(seStr,2),"%)")
drawRect = TRUE
}
if (drawRect) {
polygon(x=rectXCoord,y=rectYCoord,col=rectColor)
text(x=labX,y=labY,labels=cellLabel,col="black",cex=0.8)
}
# Add T1 class name to left of grid
if ((T2Idx %% nClasses) == 1) {
if(datatype=='LU') { # note to self: need to scale these values by nClasses
xLabOffset = 2
} else { # LC
xLabOffset = 1.6
}
xcoord = labX - xLabOffset
ycoord = labY
par(xpd=NA)
text(x=xcoord,y=ycoord,labels=allClassesPretty[T1Idx],col="black",cex=0.9)
# left side title
if (T1Idx == 1 && T2Idx == 1) {
text(x=xcoord,y=ycoord+0.75,labels=paste0("T1 ",yaxTitle),col="black",font=2)
}
} # end if/write T1 class names along left of grid
# Add T2 class name along top of grid
if ((T1Idx %% nClasses) == 1) {
if(datatype=='LU') { # note to self: need to scale these values by nClasses
xLabOffset = 0
yLabOffset = 2
} else { # LC
xLabOffset = 0.1
yLabOffset = 1.5
}
xcoord = labX + xLabOffset
ycoord = labY + yLabOffset
par(xpd=NA)
text(x=xcoord,y=ycoord,labels=allClassesPretty[T2Idx],col="black",cex=0.9,srt=90)
# top side title
if (T1Idx == 1 && T2Idx == 1) {
if (datatype=='LU') { # note to self: need to scale these values by nClasses
yLabOffset = 1
} else { # LC
yLabOffset = 1
}
text(x=xcoord,y=ycoord+yLabOffset,labels=paste0("T2 ",yaxTitle),col="black",font=2)
}
} # end if/write T1 class names along left of grid
} # end for loop over T2
} # end for loop over T1
par(xpd=NA) # allow drawing outside of figure region itself.
legend("topright",
legend=c("Persistence","Change\nOccurred",
paste0("Change\nCombination\nNot Present in\n",AOInm)),
pt.cex=1.5,fill=c("gray","orange","white"), cex=1, bty='n', bg="white",
inset=c(-0.05,0.05),y.intersp=1.4)
}
###### End of plotCheckerboard function ##################################################
##********** END OF PLOT FUNCTIONS ***************************************************###
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
#=========================================================================================================
###### Everything below is adding text, data to plots using functions created above ######################
# The above code are custom data and plot functions
# Below we fill in plots using the functions above with FIA input data, and with the addition of plot text
#=========================================================================================================
#===================================================================================================================
# Forest LU and Tree LC summary: This chunk is specific to forest LU and LC. Other LU summary info is in next chunks
#===================================================================================================================
# --------------------------------------------------------------------------------
#  * estimate for AOI for T1
#  *   + uncertainty info
#  * estimate for AOI for T2
#  *   + uncertainty info
#  * direction of T1 --> T2 change (decrease or increase)
#  * wording to describe the change in classes from T1 to T2, depending on whether it was incr. or decr.
### Create an empty dataframe and fields to populate (summaryInfo dataframe)
## The following code populates the fields created below in the summaryInfo dataframe
# -------------------------------------------------------------------------------------
summaryInfo = as.data.frame(matrix(nrow=1,ncol=18))
names(summaryInfo) = c("forLuEstT1",
"forLuUncT1",
"forLuEstT2",
"forLuUncT2",
"forLuAmtChange",
"forLuAmtChangeUnc",
"forLuDecrIncr",
"forLuClassDescT1",
"forLuClassDescT2",
"treeLcEstT1",
"treeLcUncT1",
"treeLcEstT2",
"treeLcUncT2",
"treeLcAmtChange",
"treeLcAmtChangeUnc",
"treeLcDecrIncr",
"treeLcClassDescT1",
"treeLcClassDescT2")
## INPUT 6: Time 1 Land Use estimation and uncertainty
# -------------------------------------------------------------------------------------
summaryInfo[1,]$forLuEstT1 = Input6[Input6[[use1nm]] == "Forest",]$est
summaryInfo[1,]$forLuUncT1 = Input6[Input6[[use1nm]]== "Forest",]$est.se
## INPUT 7: Time 2 Land Use estimation and uncertainty
# -------------------------------------------------------------------------------------
summaryInfo[1,]$forLuEstT2 = Input7[Input7[[use2nm]] == "Forest",]$est
summaryInfo[1,]$forLuUncT2 = Input7[Input7[[use2nm]] == "Forest",]$est.se
## INPUT 8: LU net change and uncertainty associated w/ LU net change
# The LU net change value goes in figure 3 box plot
# This value goes into Figure 3 boxplot Forest LU loss/gain --- see Notes concerning question about this
# ------------------------------------------------------------------------------------------
category = unlist(strsplit(Input8$gain.val,split=" to "))
category = category[seq(2,length(category),by=2)] # get only even elements on the right hand side of the "to" equation
Input8 = cbind(category, Input8)
summaryInfo[1,]$forLuAmtChange = Input8[Input8[,1] == 'Forest',]$diff.est
summaryInfo[1,]$forLuAmtChangeUnc = Input8[Input8[,1] == 'Forest',]$diff.se
## INPUT 9: Determines if LU change decrease or increased based on forLuAmtChange field value in SummaryInfo table
# Change in LU between two years is populated into "forLuDecrIncr" field
# The type of LU class that changed is populated into "forLuClassDescT1/T2" fields
# Forest land use is row one, hence index [1,]
# -----------------------------------------------------------------------------------------------
if (summaryInfo[1,]$forLuAmtChange == 0) {
summaryInfo[1,]$forLuDecrIncr = "did not change"
summaryInfo[1,]$forLuClassDescT1 = NA
summaryInfo[1,]$forLuClassDescT2 = NA
} else if (summaryInfo[1,]$forLuAmtChange < 0) {
summaryInfo[1,]$forLuDecrIncr = "decreased"
summaryInfo[1,]$forLuClassDescT1 = 'Forest'
# figure out what Forest changed to; leave out any T1=0/T2=0 (never present) combos
classesT2 = Input9[Input9[[use1nm]] == 'Forest' &
Input9[[use2nm]] != 'Forest' &
Input9$est != 0,][[use2nm]]
# build string to describe what Forest changed to
if (length(classesT2) == 1) {
classesT2Str = classesT2[1]
} else if (length(classesT2) == 2) {
classesT2Str = paste0(classesT2[1]," and ",classesT2[2])
} else { # > 2
classesT2Str = classesT2[1]
for (i in 2:(length(classesT2)-1)) {
classesT2Str = paste0(classesT2Str,", ",classesT2[i])
}
classesT2Str = paste0(classesT2Str,", and ",classesT2[length(classesT2)])
summaryInfo[1,]$forLuClassDescT2 = classesT2Str
} # end if/building string to describe what Forest changed to
} else { # if (summaryInfo[1,]$forLuAmtChange > 0) {
summaryInfo[1,]$forLuDecrIncr = "increased"
summaryInfo[1,]$forLuClassDescT2 = 'Forest'
# figure out what classes changed from somethign else to Forest
classesT1 = Input9[Input9$use_2_nm == 'Forest' &
Input9$use_1_nm != 'Forest' &
Input9$est != 0,]$use_1_nm
# build string to describe what Forest changed to
if (length(classesT1) == 1) {
classesT1Str = classesT1[1]
} else if (length(classesT1) == 2) {
classesT1Str = paste0(classesT1[1]," and ",classesT1[2])
} else { # > 2
classesT1Str = ""
for (i in 1:(length(classesT1)-1)) {
classesT1Str = paste0(classesT1Str,",")
}
classesT1Str = paste0(classesT1Str," and ",classesT1[length(classesT1)])
summaryInfo[1,]$forLuClassDescT1 = classesT1Str
} # end if/building string to describe what classes changed to Forest
} # end if/determine if Forest increased, decreased or stayed the same.
if (summaryInfo[1,]$forLuAmtChange == 0) {
forLuChgStmt = ""
forLuChgStmt1 = ""
} else { # there was change
forLuChgStmt = paste0("by ",setDecPlaces(summaryInfo[1,]$forLuAmtChange,3),"%  (+/-",
setDecPlaces(summaryInfo[1,]$forLuAmtChangeUnc,3),"%)",
" due to conversion of lands from ",
summaryInfo[1,]$forLuClassDescT1," to ",
summaryInfo[1,]$forLuClassDescT2)
forLuChgStmt1 = paste0(
"This change was due to conversion of lands from ",
summaryInfo[1,]$forLuClassDescT1," to ",
summaryInfo[1,]$forLuClassDescT2," LU.")
} # end if/define Forest LU change statement
## INPUT 10: Percent of Tree Landcover (LC) for T1 (Year 1)
# ----------------------------------------------------------------------------------------------
summaryInfo[1,]$treeLcEstT1 = Input10[Input10[[cover1nm]] == "Tree - Live",]$est
summaryInfo[1,]$treeLcUncT1 = Input10[Input10[[cover1nm]] == "Tree - Live",]$est.se
## INPUT 11: Percent of Tree Landcover (LC) for T2 (Year 2)
# ----------------------------------------------------------------------------------------------
summaryInfo[1,]$treeLcEstT2 = Input11[Input11[[cover2nm]] == "Tree - Live",]$est
summaryInfo[1,]$treeLcUncT2 = Input11[Input11[[cover2nm]] == "Tree - Live",]$est.se
## INPUT 12: Tree LC Net Change and Tree LC net change uncertainty
# Difference between "treeLcEstT1" field (year 1) and "treeLcEstT2" (year 2): Year 1 - Year 2 = percent change in tree LC
# ----------------------------------------------------------------------------------------------
category = unlist(strsplit(Input12$gain.val,split=" to "))
category = category[seq(2,length(category),by=2)] # get only even elements on the right hand side of the "to" equation
Input12 = cbind(category, Input12)
summaryInfo[1,]$treeLcAmtChange = Input12[Input12[,1] == 'Tree - Live',]$diff.est
summaryInfo[1,]$treeLcAmtChangeUnc = Input12[Input12[,1] == 'Tree - Live',]$diff.se
## INPUT 13: Overall tree LC increase or decrease -- What forest changed to for T1 and T2 (year1 and year 2)
# ----------------------------------------------------------------------------------------------
if (summaryInfo[1,]$treeLcAmtChange == 0) {
summaryInfo[1,]$treeLcDecrIncr = "did not change"
summaryInfo[1,]$treeLcClassDescT1 = NA
summaryInfo[1,]$treeLcClassDescT2 = NA
} else if (summaryInfo[1,]$treeLcAmtChange < 0) {
summaryInfo[1,]$treeLcDecrIncr = "decreased"
summaryInfo[1,]$treeLcClassDescT1 = 'Tree'
# figure out what Tree LC changed to; leave out any T1=0/T2=0 (never present) combos
classesT2 = Input13[Input13[[cover1nm]] == 'Tree - Live' &
Input13[[cover2nm]] != 'Tree - Live' &
Input13$est != 0,][[cover2nm]]
# build string to describe what Tree changed to
if (length(classesT2) == 1) {
classesT2Str = classesT2[1]
} else if (length(classesT2) == 2) {
classesT2Str = paste0(classesT2[1]," and ",classesT2[2])
} else { # > 2
classesT2Str = classesT2[1]
for (i in 2:(length(classesT2)-1)) {
classesT2Str = paste0(classesT2Str,", ",classesT2[i])
}
classesT2Str = paste0(classesT2Str,", and ",classesT2[length(classesT2)])
summaryInfo[1,]$treeLcClassDescT2 = classesT2Str
} # end if/building string to describe what Forest changed to
} else { # if (summaryInfo[1,]$treeLcAmtChange > 0) {
summaryInfo[1,]$treeLcDecrIncr = "increased"
summaryInfo[1,]$treeLcClassDescT2 = 'Tree'
# figure out what classes changed from somethign else to Tree
classesT1 = Input13[Input13$cover_2_nm == 'Tree - Live' &
Input13$cover_1_nm != 'Tree - Live' &
Input13$est != 0,]$cover_1_nm
# build string to describe what Tree changed to
if (length(classesT1) == 1) {
classesT1Str = classesT1[1]
} else if (length(classesT1) == 2) {
classesT1Str = paste0(classesT1[1]," and ",classesT1[2])
} else { # > 2
classesT1Str = ""
for (i in 1:(length(classesT1)-1)) {
classesT1Str = paste0(classesT1Str,",")
}
classesT1Str = paste0(classesT1Str," and ",classesT1[length(classesT1)])
summaryInfo[1,]$forLuClassDescT1 = classesT1Str
} # end if/building string to describe what classes changed to Tree
} # end if/determine if Tree increased, decreased or stayed the same.
if (summaryInfo[1,]$treeLcAmtChange == 0) {
treeLcChgStmt1 = ""
} else { # there was change
treeLcChgStmt1 = paste0(
"This change was due to conversion of lands from ",
summaryInfo[1,]$treeLcClassDescT1," to ",
summaryInfo[1,]$treeLcClassDescT2," LC.")
} # end if/define Tree LC change statement
## Input 21: T2 Cover heatmap setup
d = data.frame(Input21[,-1],row.names = Input21[,1])
## Convert to matrix for heat map
d = as.matrix(d, replace=TRUE)
## Round values to first decimal
#mat = round(as.numeric(d),1)
#===================================================================================================================
# Figure 1 caption and text created here
#===================================================================================================================
figNum = figNum+1
figCap = paste0("Figure ",figNum,": High resolution imagery from two time periods (top) ",
"is used to quantify the type(s) of change occurring on ",
"the ground (bottom).  In this case, forest management ",
"practices have cleared the understory to allow seedlings to emerge.")
#===================================================================================================================
# Figure 7 - Checkerboard 1
#===================================================================================================================
##titleStr = paste0("Estimated Land Use Changes for ", AOInm,
## " Between ",yearT1," and ",yearT2,",\nAmong All Land Use Classes")
# set up layout to accommodate grid itself + T1 and T2 class names/labels
# set up multi-paneled plot layout
subpanel_coords = matrix(NA,nrow=1,ncol=4) # nrow = nSubPanels
# ncol = L,R,B,T
# subpanel #1
subpanel_coords[1,1] = 0.05
subpanel_coords[1,2] = 0.95
subpanel_coords[1,3] = 0.0
subpanel_coords[1,4] = 0.9
invisible(split.screen(subpanel_coords))
# subpanel #1 - checkerboard itself (only 1 panel in this graphic)
screen(1)
par(mar = c(0, 5, 0, 0))
par(oma = c(0, 0, 0, 0))
object = plotCheckerboard2(datatype='LU',inFile=Input19,
use1nm=use1nm, use2nm=use2nm,
cover1nm=cover1nm, cover2nm=cover2nm,
allClasses = allLUClasses,
allClassesPretty = allLUClassLabs,
cellWidth=1,cellHeight=1)
##axis(1,pos=1)
##axis(2,pos=1)
# close up subpanel screens
close.screen(all = TRUE)
# add overall figure title
##title(main=titleStr,line=0,cex.main=1.5)
#===================================================================================================================
# Figure 6 - Percent of Area Changed, by Agent of Change -- This part adds in caption text &
# plots data using plotGainLossSingClass function created above
#===================================================================================================================
## Input 18: Forest Land Use Change input (Figure 6)
# Don't include "No Change"
tabInfo = Input18[Input18[[agentnm]] != 'No Change',]
barData = as.numeric(tabInfo$est)
barLabels = tabInfo[[agentnm]]
# replace "Stress" with "Stress and Mortality" on the y axis labels
barLabels[barLabels == 'Stress'] = 'Stress and Mortality'
# set xticks to accommodate CIs, which extend beyond the bars themselves
xLeft = min(tabInfo$CI95left,na.rm=TRUE)
if (min(tabInfo$CI95left,na.rm=TRUE) < 0) {
xLeft = 0
}
xticks = pretty(c(xLeft,
max(tabInfo$CI95right,na.rm=TRUE)))
xmin = xticks[1]
xmax = tail(xticks,n=1)
# set color ramp
colorsInRamp = c("darkgray","white")
colRamp = colorRampPalette(colorsInRamp)
# add bar plot to graphic, with margins to accommodate labels and titles.
# bottom, left, top, and right
par(mar=c(3,9,3,1))
barp = barplot(rev(barData),col = rev(colRamp(length(barData))),xlim=c(xmin,xmax),
beside=FALSE,horiz=TRUE,
space=0.25,axes=FALSE,
xlab="",names.arg=rev(barLabels),font=1,las=1,cex.names=0.8)
# add 95% confidence intervals
ycoords = rev(barp[,1])
par(xpd=NA)
for (i in 1:length(ycoords)) {
#  xLeft = max(0,tabInfo$CI95left[i])
xLeft = max(0,barData[i])
lines(x=c(xLeft,tabInfo$CI95right[i]),y=rep(ycoords[i],2))
}
# add reference lines
par(xpd=FALSE)
abline(v=xticks,lty="dotted",col="gray")
# add legend to explain that black line = 95% confidence interval
par(xpd=NA) # allow drawing outside of box plot area
legend("topright",legend=c("95% Confidence Interval"),col="black",lty="solid",
bty='n',text.col="black",cex=0.8,ncol=1,inset=c(0.00,-0.25))
# add x-axis ticks and labels
axis(1,at=xticks,labels=paste0(setDecPlaces(xticks,1)," %"))
# add y-axis title
#axis(2,at=median(ycoords),labels=c("Agent of Change"),
#     las=3,cex.axis=1.2,font=2,mgp=c(3,7,0),tick=FALSE) # default mgp = 3,1,0
# Add Main title.
par(xpd=FALSE)
##mtext(text=paste0("Percent of Area Changed, by Agent of Change"),
##side=3,line=2,font=2,cex=1.5)
box()
SAareadat1 <- modSAest(SApopdat=SApopdat, SApackage="JoSAE",
SAmethod="area", esttype="AREA", landarea="FOREST",
smallbnd.att=NULL, savedata=FALSE, rawdata=TRUE,
returntitle=TRUE, multest=TRUE, title.ref=title.ref)
