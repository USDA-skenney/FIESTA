---
title: "EVALIDator - Part Ib - Area Estimates - ALP_ADFORCD - Manti-LaSal"
author: Tracey S. Frescino
output:
  pdf_document: default
  html_document:
    df_print: paged
---

### Objective:
Demonstrate difference between generating estimates using EVALIDator vs generating estimates on-the-fly using FIESTA. 

Part I: Describe process for populating FIADB population tables and generating estimates using EVALIDator.
  a. Steps for generating population data
  b. Steps for calculating area estimates
  c. Steps for calculating tree estimates
  
Part II: Describe process using FIESTA for generating population data and estimates.
  Method (A): using state as population, data from FIADB, filtered for National Forest (match EVALIDator)
  Method (B): using state as population, data sumarized in FIESTA, filtered for National Forest
  Method (C): using National Forest boundary as population, data summarized in FIESTA

Part III: Compare results of EVALIDator process and FIESTA process.

 
 
### FIA Estimation Strategy
Estimation calculations based on the green-book (Scott et al. 2005) for mapped plots, using post-stratification.Stratification is used to reduce variance in population estimates by partitioning the population into homogenous classes (strata), such as green/brown (i.e., predicted forest and nonforest). 

Steps for estimation

* Adjusted condition proportions are summed by plot and domain, then summed by strata.

* The strata means are then combined using the strata weights and then expanded using the total land area in the population.

* The strata variance are calculated and expanded using the total land area in the population. 

<!-- I. [Load libraries](#loadlib) -->
<!-- II. [Specify data identifier](#evalid) -->
<!-- III. [Import data](#importdata) -->
<!-- AREA1. [Adjust condition proportions](#adj) -->
<!-- AREA2. [Define estimation response and domain(s)](#define) -->
<!-- AREA3. [Summarize adjusted response by domain and strata](#ydomstr) -->
<!-- AREA4. [Calculate area estimates](#areaest) -->
<!-- AREA5. [Calculate error for area estimates](#areaerr) -->
<!-- AREA6. [Merge area estimates and error](#areaesterr) -->
<!-- AREA7. [A nice tabular way to output table](#areakable) -->
<!-- AREA8. [Bar plot](#areabar) -->
<!-- EXPORT. [Export area estimates and error](#exparea) -->


```{r include=FALSE}

## Install packages and load libraries
if (!require("knitr")) install.packages("knitr")      ## Create nice table
if (!require("ggplot2")) install.packages("ggplot2")  ## Create nice barplot


```


### I. Load libraries{#loadlib}

```{r results='hide'}

options(scipen=6)
options(stringsAsFactors=FALSE)

library(knitr)
library(ggplot2)

```


### II. Specify data identifier{#evalid}
```{r results='hide'}

evalid <- c(491800, 81800)


```


### III. Import data{#importdata}
```{r}

## Import data from CSV files in working directory, with names including prefix

## Define datafolder
datfolder <- "_data"

## Define prefix for input file names
datpre <- paste0("EVALIDator_steps_eval_", paste(evalid, collapse="_"))


## Import population data
pltassgn <- read.csv(file.path(datfolder, paste0(datpre, "_pltassgn.csv")), stringsAsFactors=FALSE)
stratalut <- read.csv(file.path(datfolder, paste0(datpre, "_stratalut.csv")), stringsAsFactors=FALSE)

## Import condition-level (filtered for nonresponse) and tree-level data for evalid
plt <- read.csv(file.path(datfolder, paste0(datpre, "_plt.csv")), stringsAsFactors=FALSE)
condf <- read.csv(file.path(datfolder, paste0(datpre, "_condf.csv")), stringsAsFactors=FALSE)
tree <- read.csv(file.path(datfolder, paste0(datpre, "_tree.csv")), stringsAsFactors=FALSE)

table(pltassgn$STATECD)
table(plt$PLOT_STATUS_CD)
table(condf$COND_STATUS_CD)
head(stratalut)

dim(condf)

head(plt[, c("CN", "STATECD", "COUNTYCD", "PLOT", "INVYR", "PLOT_STATUS_CD", "EVALID", "ALP_ADFORCD")])


```



### AREA1. Adjust condition proportions{#adj}

Create adjusted proportions for conditions (CONDPROP_ADJ) based on subplot and macroplot adjustments. In the FIADB cond table, the variable PROP_BASIS indicates whether a macroplot was measured.

Calculation steps:

1. Merge stratalut to to pltassn by ESTN_UNIT and STRATUMCD, then merge to cond by PLT_CN
2. CONDPROP_ADJ: Merge area adjustment factors for condition to cond table
3. Calculate adjusted condition proportion (CONDPROP_ADJ) by multiplying CONDPROP_UNADJ with ADJ_FACTOR_MACR or ADJ_FACTOR_SUBP, based on PROP_BASIS variable.

```{r}

## 1. Merge area adjustment factors for condition and trees to pltassn by ESTN_UNIT and STRATUMCD
pltadj <- merge(pltassgn, 
          stratalut[, c("STATECD", "ESTN_UNIT", "STRATUMCD", "ADJ_FACTOR_MACR", "ADJ_FACTOR_SUBP",
                "ADJ_FACTOR_MICR")], by=c("STATECD", "ESTN_UNIT", "STRATUMCD"))

## 2. CONDPROP_ADJ: Merge area adjustment factors for condition to cond table
condadj <- merge(condf, pltadj[, c("PLT_CN", "ADJ_FACTOR_MACR", "ADJ_FACTOR_SUBP")],
                by="PLT_CN")

#head(condadj)
dim(condadj)


## 3. Calculate adjusted condition proportion (CONDPROP_ADJ) by multiplying CONDPROP_UNADJ with 
##    ADJ_FACTOR_MACR or ADJ_FACTOR_SUBP.
condadj$CONDPROP_ADJ <- with(condadj, ifelse(PROP_BASIS == "MACR",  
                              CONDPROP_UNADJ*ADJ_FACTOR_MACR, CONDPROP_UNADJ*ADJ_FACTOR_SUBP))

head(condadj[, c("PLT_CN", "CONDID", "ADJ_FACTOR_MACR", "ADJ_FACTOR_SUBP", "CONDPROP_ADJ")])
dim(condadj)


```


### AREA2. Apply plot/condition filters{#filters}

Plot and condition filters subset the area of the population for the desired output. This does not change the population data used for estimation, including stratum weights or number of sampled plots by estimation unit. Therefore, all plots within the population are used for generating estimates and estimated variances, with plots not included in the filter considered 'outside the domain of interest' and set to 0.

Calculation steps:

1. Merge plot variables and adjusted cond tables
2. Apply land area filters (e.g., Forest land only)
3. Apply other plot/condition filters (e.g., Fishlake National Forest)
4. Define titles for land area and condition filters

```{r}


## 1. Merge plot variables and adjusted cond tables
pltcondadj <- merge(plt, condadj, by.x="CN", by.y="PLT_CN")
dim(condadj)
dim(pltcondadj)


## 2. Apply land area filters (e.g., Forest land only)
pltcondadjf <- pltcondadj[pltcondadj$COND_STATUS_CD == 1, ]

## 3. Apply other plot/condition filters (e.g., Manit-Lasal National Forest)
pltcondadjf <- pltcondadj[pltcondadj$ALP_ADFORCD == 410, ]

dim(pltcondadj)
dim(pltcondadjf)


## 4. Define titles for land area and condition filters
title.landarea <- "forest land"
title.filter <- "Manti-La Sal National Forest"


```


### AREA3. Define estimation response and domain(s){#define}

For area estimates, the response attribute is the adjusted condition proportion (CONDPROP_ADJ)

What do you want to estimate response by?

Calculation steps:

1. Define estimation response  (i.e., CONDPROP_ADJ)
2. Define domain of interest (e.g., stand-size class - STDSZCD)

```{r results='hide'}

## 1. Define estimation response (i.e., CONDPROP_ADJ)
y <- "CONDPROP_ADJ"

## 2. Define domain of interest (e.g., STDSZCD)
domain <- "STDSZCD"

## 3. Define domain title for output 
title.domain <- "Stand-size class"


```


### AREA4. Summarize adjusted response by domain and strata{#ydomstr}

Estimates are calculated by strata and weighted by strata proportions. Consequently, all estimation calculations are summarized and stored in stratalut.
Calculation steps:

1. Sum (filtered) estimation response (y) by plot and domain to plot-level
2. Merge estn_unit and stratum assignment from pltassgn to pltdom
3. Sum plot estimation response (y.plt) by domain and strata
4. Merge to stratalut

```{r}

## 1. Sum (filtered) estimation response (y) by plot and domain to plot-level
pltdom <- aggregate(pltcondadjf[[y]], pltcondadjf[, c("CN", domain)], sum, na.rm=TRUE)
names(pltdom) <- c("CN", domain, "y.plt")
head(pltdom)


## 2. Merge estn_unit and stratum assignment from pltassgn to pltdom
pltdom.assgn <- merge(pltdom, pltassgn, by.x="CN", by.y="PLT_CN")
head(pltdom.assgn)


## 3. Sum plot estimation response (y.plt) by strata
stratdom <- aggregate(pltdom.assgn$y.plt, 
                pltdom.assgn[, c("STATECD", "ESTN_UNIT", "STRATUMCD", domain)], sum, na.rm=TRUE)
names(stratdom) <- c("STATECD", "ESTN_UNIT", "STRATUMCD", domain, "y.str")
head(stratdom)


## 4. Merge to stratalut
stratdom <- merge(stratalut, stratdom, by=c("STATECD", "ESTN_UNIT", "STRATUMCD"))

## order by STATECD, ESTN_UNIT, STRATUMCD
stratdom <- stratdom[order(stratdom$STATECD, stratdom$ESTN_UNIT, stratdom$STRATUMCD),]
head(stratdom)


```


### AREA5. Calculate area estimates{#areaest}

Now, let's get estimates. 

Calculation steps:

1. Calculate strata-level estimate by multiplying the summed adjusted response with stratum expansion factor (y.str * EXPNS) by domain, stratum, and estimation unit
2. BY ESTIMATION UNIT: Aggregate estimate by domain and esimation unit
3. TOTAL: Aggregate estimated (est) by domain

```{r}

## 1. Calculate strata-level estimate by multiplying the summed adjusted response with
##    stratum expansion factor (y.str * EXPNS) by domain, stratum, and estimation unit
stratdom$est.str <- with(stratdom, y.str * EXPNS)


## 2. BY ESTIMATION UNIT: Sum strata estimate (est.str) by domain and esimation unit
area.est.unit <- aggregate(stratdom$est.str, 
                    by=stratdom[, c("STATECD", "ESTN_UNIT", domain)], sum, na.rm=TRUE)
names(area.est.unit) <- c("STATECD", "ESTN_UNIT", domain, "est")
area.est.unit <- area.est.unit[order(area.est.unit$ESTN_UNIT, area.est.unit[[domain]]), ]

## order by STATECD, ESTN_UNIT, STRATUMCD
area.est.unit <- area.est.unit[order(area.est.unit$STATECD, area.est.unit$ESTN_UNIT, 
                                     area.est.unit[[domain]]),]
head(area.est.unit)


## 3. TOTAL: Aggregate estimated (est) by domain
area.est <- aggregate(area.est.unit$est, 
                    by=list(area.est.unit[[domain]]), sum, na.rm=TRUE)
names(area.est) <- c(domain, "AREA.EST")
area.est


```


### AREA6. Calculate error for area estimates{#areaerr}

Most importantly, let's get variance of estimates. 

Calculation steps:
 
1. Square plot estimation response (y.plt)
2. Sum squared plot estimation response (ysq.plt) by domain and strata and merge to stratdom 
3. Merge summed squared response to stratdom
4. Calculate estimated variance of the estimate by domain, stratum, and estimation unit
5. BY ESTIMATION UNIT: Aggregate estimated variance by domain and estimation unit
6. TOTAL: Aggregate estimated variance (est.var) by domain

```{r}


## 1. Square plot estimation response (y.plt)
pltdom.assgn$ysq.plt <- pltdom.assgn$y.plt^2


## 2. Sum squared plot estimation response (ysq.plt) by domain and strata and merge to stratdom
stratdom.ysq <- aggregate(pltdom.assgn$ysq.plt, 
                     by=pltdom.assgn[, c("STATECD", "ESTN_UNIT", "STRATUMCD", domain)], sum)
names(stratdom.ysq) <- c("STATECD", "ESTN_UNIT", "STRATUMCD", domain, "ysq.str")


## 3. Merge summed squared response to stratdom
stratdom2 <- merge(stratdom, stratdom.ysq, by=c("STATECD", "ESTN_UNIT", "STRATUMCD", domain))
head(stratdom2)


## order by STATECD, ESTN_UNIT, STRATUMCD
stratdom2 <- stratdom2[order(stratdom2$STATECD, stratdom2$ESTN_UNIT, stratdom2$STRATUMCD),]
head(stratdom2)


## 4. Calculate estimated variance of the estimate by domain, stratum, and estimation unit
stratdom2$est.var.str <- with(stratdom2,   
	( strwt * n.strata / n.total + (1 - strwt) * n.strata / n.total^2 ) * 
	( ysq.str - 1 / n.strata * y.str^2 ) / ( n.strata * (n.strata - 1) ) * AREA_USED^2)


## 5. BY ESTIMATION UNIT: Aggregate estimated variance by domain and estimation unit
area.var.unit <- aggregate(stratdom2$est.var.str, 
                    by=stratdom2[, c("STATECD", "ESTN_UNIT", domain)], sum, na.rm=TRUE)
names(area.var.unit) <- c("STATECD", "ESTN_UNIT", domain, "est.var")
area.var.unit <- area.var.unit[order(area.var.unit$ESTN_UNIT, area.var.unit[[domain]]), ]

## order by STATECD, ESTN_UNIT, STRATUMCD
area.var.unit <- area.var.unit[order(area.var.unit$STATECD, area.var.unit$ESTN_UNIT, 
                                     area.var.unit[[domain]]),]
head(area.var.unit)


## 6. TOTAL: Aggregate estimated variance (est.var) by domain
area.var <- aggregate(area.var.unit$est.var, 
                    by=list(area.var.unit[[domain]]), sum, na.rm=TRUE)
names(area.var) <- c(domain, "AREA.VAR")
area.var


```



### AREA7. Merge area estimates and error{#areaesterr}

Calculation steps:

1. Merge area estimates with error estimates
2. Calculate standard error
3. Calculate percent error (confidence level - 68%)
4. Calculate confidence interval

```{r}


## 1. Merge area estimates with error estimates
areatab <- merge(area.est, area.var, by=domain)


## 2. Calculate standard error
areatab$AREA.SE <- sqrt(areatab$AREA.VAR)


## 3. Calculate percent error (confidence level - 68%)
areatab$AREA.ERRPCT <- (areatab$AREA.SE / areatab$AREA.EST) * 100

areatab

```


### AREA8: A nice way to output table{#areakable}

```{r}

## Paste together for caption
title.main <- paste0("Area, in acres, of ", title.landarea, " by ", 
                        tolower(title.domain), ", ", title.filter)

kable(areatab[, c(domain, "AREA.EST", "AREA.ERRPCT")],
  format = "pandoc",   # default
  caption = title.main,
  col.names = c(domain, "AREA.EST", "AREA.ERRPCT"),
  row.names = FALSE,
  align = c("r"),       # align = c("c", "c", "c", "r")
  digits = 2,
  format.args=list(big.mark = ",")
  # padding = 2         # inner spacing
)


```



### AREA9. Bar plot{#areabar}

```{r}

## Create barplot of estimates, including standard errors
ggplot(areatab, aes(x=as.factor(get(domain)), y=AREA.EST)) +
        geom_bar(position=position_dodge(), stat="identity", colour='black') +
        ggtitle(paste(strwrap(title.main, 77), collapse="\n")) +
        xlab(title.domain) + ylab("Acres") +
        theme(plot.title = element_text(size=12)) +
        geom_errorbar(aes(ymin=AREA.EST-AREA.SE, ymax=AREA.EST+AREA.SE),
              width=.2,position=position_dodge(.9))


```


### EXPORT. Export area estimates and error{#exparea}

```{r}

## Define folder for estimates
estfolder <- "_estimates"

## Define prefix for output names
areaout.pre <- "EVALIDator_area"

## Define variable names for output 
area.names <- c("AREA.EST", "AREA.SE", "AREA.ERRPCT")

## Define new variable names for output
areaout.names <- paste(areaout.pre, c("est", "se", "pse"), sep="_")


## Subset table and add new names
areaout <- areatab[, c(domain, area.names)]
names(areaout) <- c(domain, areaout.names)
areaout

## Export table estfolder
write.csv(areaout, file.path(estfolder, paste0(areaout.pre, "_estimates.csv")), row.names=FALSE)


```

